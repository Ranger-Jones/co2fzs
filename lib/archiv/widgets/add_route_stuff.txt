ModalDivider(),
          Container(
            margin: const EdgeInsets.only(top: 10, bottom: 20),
            child: Text(
              "Wie bist du heute zur Schule gekommen?",
              style: Theme.of(context).textTheme.headline3,
              textAlign: TextAlign.center,
            ),
          ),
          Row(mainAxisAlignment: MainAxisAlignment.center, children: [
            ImageButton(
              transport_option: walk,
              onTap: () => selectVehicle("walk"),
              selected: checkedVehicle["walk"]!,
              onDoubleTap: () {
                selectVehicle("walk");
                increaseAddingStep();
              },
            ),
            ImageButton(
              transport_option: bicycle,
              onTap: () => selectVehicle("bicycle"),
              selected: checkedVehicle["bicycle"]!,
              onDoubleTap: () {
                selectVehicle("bicycle");
                increaseAddingStep();
              },
            ),
          ]),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ImageButton(
                transport_option: pt,
                onTap: () => selectVehicle("pt"),
                selected: checkedVehicle["pt"]!,
                onDoubleTap: () {
                  increaseAddingStep();
                  selectVehicle("pt");
                },
              ),
              ImageButton(
                transport_option: car,
                onTap: () => selectVehicle("car"),
                selected: checkedVehicle["car"]!,
                onDoubleTap: () {
                  selectVehicle("car");
                  increaseAddingStep();
                },
              ),
            ],
          ),
          SizedBox(height: 20),
        ];
      case 1:
        return [
          ModalDivider(),
          AuthButton(
            onTap: () {
              DatePicker.showDatePicker(
                context,
                showTitleActions: true,
                minTime: contest!.startDate.toDate(),
                maxTime: DateTime.now(),
                onChanged: (date) {
                  setState(() {
                    if (startDate.weekday == 6 || startDate.weekday == 7) {
                      startDate = contest!.startDate.toDate();
                    } else {
                      startDate = date;
                    }
                  });
                },
                onConfirm: (date) {
                  setState(() {
                    if (startDate.weekday == 6 || startDate.weekday == 7) {
                      startDate = contest!.startDate.toDate();
                    } else {
                      startDate = date;
                    }
                  });
                },
                currentTime:
                    (DateTime.now().weekday == 6 || DateTime.now().weekday == 7)
                        ? contest!.startDate.toDate()
                        : DateTime.now(),
                locale: LocaleType.de,
              );
            },
            label: startDate == null
                ? "Select Date"
                : DateFormat.yMMMMd().format(startDate),
          ),
          SizedBox(
            height: 20,
          ),
          user.homeAddress2 != "" && user.homeAddress != user.homeAddress2
              ? DropdownButton<String>(
                  value: startAddress,
                  icon: const Icon(Icons.arrow_downward, color: primaryColor),
                  elevation: 16,
                  style: Theme.of(context).textTheme.bodyText2,
                  isExpanded: true,
                  alignment: Alignment.center,
                  underline: Container(
                    height: 2,
                    color: blueColor,
                  ),
                  onChanged: (String? newValue) {
                    setState(() {
                      startAddress = newValue!;
                    });
                  },
                  items: [location1.name, location2.name]
                      .map<DropdownMenuItem<String>>((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    );
                  }).toList(),
                )
              : Text(
                  "Heimatadresse: ${location1.name}",
                  style: Theme.of(context).textTheme.headline3,
                  textAlign: TextAlign.start,
                ),
          SizedBox(height: 16),
          Text(
            "Schuladresse: ${school!.location}",
            style: Theme.of(context).textTheme.headline3,
            textAlign: TextAlign.start,
          ),
          SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                width: MediaQuery.of(context).size.width * 0.8,
                child: AutoSizeText(
                  "Willst du eine RÃ¼ckfahrt eintragen? Dann setze hier den Haken.",
                  style: Theme.of(context).textTheme.bodyText2,
                  textAlign: TextAlign.start,
                ),
              ),
              Checkbox(
                checkColor: Colors.white,
                fillColor: MaterialStateProperty.resolveWith(getColor),
                value: isChecked,
                onChanged: (bool? value) {
                  setState(
                    () {
                      isChecked = value!;
                    },
                  );
                },
              ),
            ],
          ),
          SizedBox(height: 16),
          AuthButton(
            onTap: () {
              uploadRoute(user.schoolIdBlank, user.classId);
            },
            label: "Eintrag speichern",
            isLoading: _isLoading,
          ),
          SizedBox(
            height: 20,
          ),
        ]